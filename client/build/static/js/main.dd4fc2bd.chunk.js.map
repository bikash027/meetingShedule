{"version":3,"sources":["utils.js","components/Table.js","components/Column.js","components/Row.js","components/FreeSlots.js","components/Months.js","components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["monthMapping","compare","d1","d2","getFullYear","getMonth","getDate","binarySearch","sortedArray","seekElement","startIndex","endIndex","length","middleIndex","Math","floor","findStartandEndIndex","interval","ar","start","end","Table","tableBody","this","props","tableData","map","intern","id","name","key","className","React","Component","Column","date","backgroundColor","getDay","style","height","size","borderTop","Row","indexRange","styleDiv","width","marginLeft","styleP","FreeSlots","state","display","setState","slots","data","differenceArray","i","push","columns","findSlots","slot","left","onClick","showFreeSlots","Months","dates","month","firstDate","months","period","year","monthElements","getMonths","Chart","min","max","Date","setDate","findRangeofDates","setDates","dataLength","Array","from","rows","App","t","getData","setInterval","clearInterval","nextProps","nextState","next","current","axios","get","then","res","startDate","day","substring","parseInt","endDate","convertDateStringtoDate","catch","err","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd4fc2bd.chunk.js","sourcesContent":["\r\n// This function accepts the raw data sent and converts the \r\n// date strings of each record to date objects\r\nexport const convertDateStringtoDate=function(ar){\r\n\tfor(let i=0;i<ar.length;i++){\r\n\t\tconst startDate=ar[i].start;\r\n\r\n\t\tlet day=startDate.substring(0,2);\r\n\t\tlet month=startDate.substring(3,5);\r\n\t\tlet year=startDate.substring(6,10);\r\n\r\n\t\tday=parseInt(day);\r\n\t\tmonth=parseInt(month)-1;\r\n\t\tyear=parseInt(year);\r\n\r\n\t\tar[i].start=new Date(year,month,day);  //replace date string with date object\r\n\r\n\t\tconst endDate=ar[i].end;\r\n\r\n\t\tday=endDate.substring(0,2);\r\n\t\tmonth=endDate.substring(3,5);\r\n\t\tyear=endDate.substring(6,10);\r\n\r\n\t\tday=parseInt(day);\r\n\t\tmonth=parseInt(month)-1;\r\n\t\tyear=parseInt(year);\r\n\r\n\t\tar[i].end=new Date(year,month,day);  //replace date string with date object\r\n\t}\r\n}\r\n\r\nexport const monthMapping=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\r\n\r\n\r\n// This function converts date object in each record to a more readable\r\n// format e.g. 27/Sep \r\nexport const formatDate=function(ar){\r\n\r\n\treturn ar.map(function(intern){\r\n\t\treturn{\r\n\t\t\tid: intern.id,\r\n\t\t\tname: intern.name,\r\n\t\t\tstart: intern.start.getDate()+'/'+monthMapping[intern.start.getMonth()],\r\n\t\t\tend: intern.end.getDate()+'/'+monthMapping[intern.end.getMonth()]\r\n\t\t}\r\n\t})\r\n}\r\n\r\n// compares two date objects on the basis of date, month and year\r\nconst compare=function(d1,d2){\r\n\tif(d1.getFullYear()===d2.getFullYear()){\r\n\t\tif(d1.getMonth()===d2.getMonth()){\r\n\t\t\tif(d1.getDate()===d2.getDate()){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(d1.getDate()<d2.getDate())\r\n\t\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if(d1.getMonth()<d2.getMonth())\r\n\t\t\treturn -1;\r\n\t}\r\n\telse if(d1.getFullYear()<d2.getFullYear())\r\n\t\treturn -1;\r\n\treturn 1;\r\n}\r\n\r\nexport const binarySearch=function(sortedArray, seekElement){\r\n\tlet startIndex = 0;\r\n\tlet endIndex = sortedArray.length - 1;\r\n\twhile (startIndex <= endIndex) {\r\n    \tconst middleIndex = startIndex + Math.floor((endIndex - startIndex) / 2);\r\n    \tif(compare(seekElement,sortedArray[middleIndex])===0)\r\n    \t\treturn middleIndex;\r\n    \tif(compare(seekElement,sortedArray[middleIndex])===1)\r\n    \t\tstartIndex = middleIndex + 1;\r\n    \telse\r\n    \t\tendIndex=middleIndex-1;\r\n    }\r\n    return -1;\r\n}\r\n\r\n// returns the range of indices in the dates array given the intern record(interval) \r\nexport const findStartandEndIndex=function(interval,ar){\r\n\treturn {\r\n\t\tstart: binarySearch(ar,interval.start),\r\n\t\tend: binarySearch(ar,interval.end)\r\n\t}\r\n}","import React from 'react';\r\nimport {formatDate} from '../utils';\r\n\r\n// this component renders the data in tabular format\r\n\r\nclass Table extends React.Component{    \r\n\trender(){                           \r\n\t\tlet tableBody='wait for a moment';\r\n\t\tif(this.props.tableData!==''){\r\n\r\n\t\t\ttableBody=formatDate(this.props.tableData);   //format the dates\r\n\r\n\t\t\ttableBody=tableBody.map(intern=>{              //make table-rows for each record\r\n\t\t\t\treturn (<tr key={intern.id}>\r\n\t\t\t\t\t\t\t<td className=\"index\">{intern.id}</td>\r\n\t\t\t\t\t\t\t<td className=\"name\">{intern.name}</td>\r\n\t\t\t\t\t\t\t<td className=\"date\">{intern.start}</td>\r\n\t\t\t\t\t\t\t<td className=\"date\">{intern.end}</td>\r\n\t\t\t\t\t\t</tr>);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn(\r\n\t\t\t<div id=\"table\">\r\n\t\t\t\t\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td id=\"head\">intern-assignment</td>\r\n\t\t\t\t\t\t\t<td className=\"date Date\">start date</td>\r\n\t\t\t\t\t\t\t<td className=\"date Date\">end date</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{tableBody}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\nexport default Table;","import React from 'react';\r\n\r\n// This component returns a column with the date at the top\r\n\r\nclass Column extends React.Component{\r\n\trender(){\r\n\t\tconst date=this.props.date;\r\n\t\tlet backgroundColor=\"white\";\r\n\r\n\t\tif(date.getDay()===0 || date.getDay()===6)  // if day is sunday or saturday the color\r\n\t\t\tbackgroundColor='#e1e1e1';              // is changed to grey\r\n\r\n\t\tconst style={\r\n\t\t\theight:this.props.size*40+'px',\r\n\t\t\tbackgroundColor:backgroundColor,\r\n\t\t\tborderTop:\"1px solid black\"\r\n\t\t}\r\n\t\treturn(\r\n\t\t\t<div className=\"column\">\r\n\r\n\t\t\t\t<p>{this.props.date.getDate()}</p>\r\n\r\n\t\t\t\t<div style={style}></div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Column;","import React from 'react';\r\nimport {findStartandEndIndex} from '../utils';\r\n\r\n// this component renders a red colored div to represent the \r\n// period for which the intern is busy\r\n\r\nclass Row extends React.Component{\r\n\trender(){\r\n\r\n\t\tconst ar=this.props.ar;\r\n\t\tconst indexRange=findStartandEndIndex(this.props.interval,ar);  //get range of indices\r\n\t\tif(indexRange.start===-1||indexRange.end===-1){                 //from range of dates\r\n\t\t\treturn (<p></p>) ;\r\n\t\t}\r\n\t\t\r\n\t\tconst styleDiv={\r\n\t\t\twidth:(indexRange.end-indexRange.start+1)*30+'px',\r\n\t\t\tmarginLeft:indexRange.start*30+'px'\r\n\t\t}\r\n\t\tconst styleP={\r\n\t\t\tmarginLeft:(indexRange.end-indexRange.start+1)*30+10+'px'\r\n\t\t}\r\n\t\treturn(\r\n\r\n\t\t\t<div style={styleDiv} className=\"row\">\r\n\t\t\t\t<p style={styleP}>{this.props.interval.name}</p>\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t}\r\n}\r\nexport default Row;","import React from 'react';\r\nimport {findStartandEndIndex} from '../utils';\r\n\r\n//this component decides which columns should be highlighted\r\n\r\nclass FreeSlots extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\tdisplay:'none'\r\n\t\t}\r\n\t}\r\n\r\n\t// callback for click event on button\r\n\tshowFreeSlots(){\r\n\t\tthis.setState({display:'block'});\r\n\t}\r\n\r\n\t// this method applies the \"difference table\" method to find\r\n\t// dates on which no intern is busy \r\n\tfindSlots(){\r\n\t\tconst slots=[];\r\n\t\tconst data=this.props.data;\r\n\t\tconst ar=this.props.ar;\r\n\t\tconst differenceArray=[];\r\n\t\tfor(let i=0;i<ar.length;i++){\r\n\t\t\tdifferenceArray.push(0);\r\n\t\t}\r\n\t\tfor(let i=0;i<data.length;i++){\r\n\t\t\tconst indexRange=findStartandEndIndex(data[i],ar);\r\n\t\t\tdifferenceArray[indexRange.start]++;\r\n\t\t\tif(indexRange.end<ar.length-1)\r\n\t\t\t\tdifferenceArray[indexRange.end+1]--;\r\n\t\t}\r\n\t\tfor(let i=1;i<ar.length;i++){\r\n\t\t\tdifferenceArray[i]+=differenceArray[i-1];\r\n\t\t}\r\n\t\tfor(let i=0;i<ar.length;i++){\r\n\t\t\tif(differenceArray[i]===0)\r\n\t\t\t\tslots.push(i);\r\n\t\t}\r\n\t\treturn slots;\r\n\t}\r\n\r\n\trender(){\r\n\t\t\r\n\t\tconst slots=this.findSlots();\r\n\r\n\t\tconst columns=slots.map(slot=>{\r\n\t\t\tconst style={\r\n\t\t\t\tleft:slot*30+'px',\r\n\t\t\t\theight:this.props.data.length*40+'px',\r\n\t\t\t\tdisplay:this.state.display\r\n\t\t\t}\r\n\t\t\treturn <div style={style}  className='slot-column'></div>\r\n\t\t})\r\n\t\t\r\n\t\treturn(\r\n\t\t\t<div className=\"free-slots\">\r\n\t\t\t\t{columns}\r\n\t\t\t\t<button className=\"btn btn-primary\" onClick={()=>this.showFreeSlots()}>show free slots</button>\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\t\t\t\t// \r\nexport default FreeSlots;","import React from 'react';\r\nimport {monthMapping} from '../utils';\r\n\r\n//this component is for rendering the months on top of the chart\r\n\r\nclass Months extends React.Component{\r\n\t\r\n\t// this function returns an array of months \r\n\t// corresponding to each date on the chart\r\n\tgetMonths(){                                        \r\n\t\tconst dates=this.props.dates;                   \r\n\t\tlet month=dates[0].getMonth();                  \r\n\t\tlet firstDate=dates[0].getDate();\r\n\t\tconst months=[];\r\n\t\tfor(let i=1;i<dates.length;i++){\r\n\t\t\tif(dates[i].getMonth()!==month){\r\n\t\t\t\tmonths.push(\r\n\t\t\t\t\t\t{\t\r\n\t\t\t\t\t\t\tmonth: monthMapping[month],\r\n\t\t\t\t\t\t\tperiod: dates[i-1].getDate()-firstDate+1,\r\n\t\t\t\t\t\t\tyear: dates[i-1].getFullYear()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\tmonth=dates[i].getMonth();\r\n\t\t\t\tfirstDate=1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tmonths.push(\r\n\t\t\t\t\t{\t\r\n\t\t\t\t\t\tmonth: monthMapping[month],\r\n\t\t\t\t\t\tperiod: dates[dates.length-1].getDate()-firstDate+1,\r\n\t\t\t\t\t\tyear: dates[dates.length-1].getFullYear()\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\treturn months;\r\n\t}\r\n\r\n\trender(){\r\n\t\t\r\n\t\tconst months=this.getMonths();\t\t\r\n\t\tconst monthElements=months.map(month=>{\r\n\t\t\tconst style={\r\n\t\t\t\twidth:month.period*30+'px',\r\n\t\t\t}\r\n\r\n\t\t\treturn <p className=\"month\" style={style}>{month.month} {month.year}</p>\r\n\t\t});\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t{monthElements}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Months;","import React from 'react';\r\nimport Column from './Column';\r\nimport Row from './Row';\r\nimport FreeSlots from './FreeSlots';\r\nimport Months from './Months';\r\nclass Chart extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.dates=[];\r\n\t\tthis.min='';\r\n\t\tthis.max='';\r\n\t\tthis.state={}\r\n\t}\r\n\r\n\t// this method determines the range of dates the chart should contain\r\n\tfindRangeofDates(){                           \r\n\t\tlet min=new Date(2030,1,1);                \r\n\t\tlet max=new Date(1990,1,1);\r\n\t\tconst ar=this.props.data;\r\n\t\tfor(let i=0;i<ar.length;i++){\r\n\t\t\tif(ar[i].start<min)\r\n\t\t\t\tmin=ar[i].start;\r\n\t\t\tif(ar[i].end>max)\r\n\t\t\t\tmax=ar[i].end;\r\n\t\t}\r\n\t\tthis.min=min;\r\n\t\tthis.max=max;\r\n\t}\r\n\r\n\t// this method makes an array of dates ranging from the earliest\r\n\t// date to the latest date found in the data\r\n\tsetDates(){\r\n\t\tthis.dates=[];\r\n\t\tlet min=new Date(this.min);\r\n\t\twhile(min<=this.max){\r\n\t\t\tthis.dates.push(new Date(min));\r\n\t\t\tmin.setDate(min.getDate()+1);\r\n\t\t}\r\n\t\tthis.dates.push(new Date(min));\r\n\t}\r\n\trender(){\r\n\t\tthis.findRangeofDates();\r\n\t\tthis.setDates();\r\n\t\tconst dataLength=this.props.data.length;\r\n\r\n\t\tconst columns=this.dates.map(date=>{\r\n\t\t\treturn <Column size={dataLength} date={date}/>;\r\n\t\t})\r\n\t\tconst data=Array.from(this.props.data);\r\n\t\tconst rows=data.map(intern=>{\r\n\t\t\treturn <Row interval={intern} ar={this.dates}/>;\r\n\t\t});\r\n\t\tconst style={\r\n\t\t\twidth:30*this.dates.length+'px'\r\n\t\t}\r\n\t\treturn(\r\n\t\t\t\t<div id=\"chart\">\r\n\t\t\t\t\t<div style={style} id=\"canvas\">\r\n\t\t\t\t\t\t<Months dates={this.dates}/>\r\n\t\t\t\t\t\t{columns}\r\n\r\n\t\t\t\t\t\t<FreeSlots data={data} ar={this.dates}/>\r\n\r\n\t\t\t\t\t\t<div id=\"row-container\">\r\n\t\t\t\t\t\t\t{rows}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\nexport default Chart;","import React from 'react';\nimport axios from 'axios';\nimport Table from './components/Table';\nimport Chart from './components/Chart';\nimport {convertDateStringtoDate} from './utils';\n\nclass App extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.t='';\n\t\tthis.state={\n\t\t\ttableData:''\n\t\t}\n\t}\n\t/////// This method is responsible for fetching data every 10s////////\n\tcomponentDidMount(){\n\t\tthis.getData();\n\t\tthis.t=setInterval(()=>{\n\t\t\tthis.getData();\n\t\t},10000);\n\t}\n\t/////// this method is responsible for disposing of the timer////////\n\tcomponentWillUnmount(){\n\t\tclearInterval(this.t);\n\t}\n\t////// this method decides whether an update is required or not////////\n\tshouldComponentUpdate(nextProps,nextState){\n\t\tconst next=nextState.tableData;\n\t\tconst current=this.state.tableData;\n\t\tif(next.length!==current.length)\n\t\t\treturn true;\n\n\t\tfor(let i=0;i<next.length;i++){\n\t\t\tif(next[i].name===current[i].name)\n\t\t\t\tif(next[i].start===current[i].start)\n\t\t\t\t\tif(next[i].end===current[i].end)\n\t\t\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t/////// this method fetches data from server/////////\n\tgetData(){\n\t\taxios.get(\"/api\")\n\t\t.then((res)=>{\n\t\t\tconst ar=res.data;\n\t\t\tconvertDateStringtoDate(ar);\n\t\t\tthis.setState({\n\t\t\t\ttableData:ar\n\t\t\t});\n\t\t})\n\t\t.catch(function(err){\n\t\t\tconsole.log(err);\n\t\t});\n\t}\n\t////// this method renders the table and the chart///////\n\trender(){\n\t\treturn (\n\t\t\t<div style={{width:\"100%\"}}>\n\t\t\t\t<Table tableData={this.state.tableData}/>\n\t\t\t\t<Chart data={this.state.tableData}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}